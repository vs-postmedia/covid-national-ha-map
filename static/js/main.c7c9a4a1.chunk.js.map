{"version":3,"sources":["helper-functions.js","components/Tooltip/Tooltip.js","components/CircleMap/CircleMap.js","components/MapboxMap/MapboxMap.js","data/mapbox-config.js","components/App/App.js","serviceWorker.js","index.js"],"names":["helper","getUrlParam","param","queryString","window","location","search","paramValue","URLSearchParams","get","toUpperCase","this","validProvinceCodes","includes","map","num","in_min","in_max","out_min","out_max","months","numberWithCommas","x","toString","replace","Tooltip","props","console","log","esri_name","Helper","cumulative_cases","cumulative_deaths","CircleMap","state","popup","mapboxgl","Popup","closeButton","closeOnClick","showPopup","bind","hidePopup","data","extent_calcuted","range","accessToken","config","Map","container","mapContainer","style","mapboxStyle","center","zoom","features","renderMap","prevProps","mapIsLoaded","getSource","mapDataSource","setData","fire_size","forEach","d","push","parseFloat","properties","circleSizeMetric","Math","min","max","getCanvas","cursor","remove","extent","value","getExtent","i","radius","mapRange","sort","a","b","e","text","setupPopupText","setLngLat","lngLat","setHTML","addTo","prepData","on","addSource","type","addLayer","id","source","paint","circleColours","circleMarkerClassField","addControl","MapboxGeocoder","NavigationControl","setState","ref","el","Component","MapBoxMap","data_all","data_display","Axios","then","resp","mapOptions","classField","mapboxConfig","maxZoom","minZoom","mapbox_config","windowWidth","innerWidth","App","className","href","target","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7c9a4a1.chunk.js","sourcesContent":["const helper = {\n\tgetUrlParam(param) {\n\t\tconst defaultResult = null;\n\t\tconst queryString = window.location.search;\n\t\tconst urlParams = new URLSearchParams(queryString);\n\t\tlet paramValue = urlParams.get(param);\n\n\t\t// is there a value?\n\t\tparamValue = paramValue ? paramValue.toUpperCase() : defaultResult;\n\n\t\t// check if the province is a value province code\n\t\tif (param === 'prov') {\n\t\t\tparamValue = this.validProvinceCodes.includes(paramValue) ? paramValue : 'BC';\n\t\t}\n\t\treturn paramValue\n\t},\n\tmap(num, in_min, in_max, out_min, out_max) {\n\t\treturn (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n\t},\n\tmonths: ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.'],\n\tnumberWithCommas(x) {\n\t    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\t},\n\tvalidProvinceCodes: ['YT','NT','NU','BC','AB','SK','MB','ON','QC','NL','NB','PE','NS', 'CA']\n};\n\nexport default helper;\n\n","import Helper from '../../helper-functions';\nimport './Tooltip.css';\n\nconst Tooltip = (props) => {\n\tconsole.log(props)\n\treturn `\n\t\t<div>\n\t\t\t<h3>${props.esri_name}</h3>\n\n\t\t\t<p>There have been a total of ${Helper.numberWithCommas(props.cumulative_cases)} cases and ${Helper.numberWithCommas(props.cumulative_deaths)} deaths from the the coronavirus.</p>\n\t\t</div>\n\t`;\n};\n\nexport default Tooltip;","import React, { Component } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport Tooltip from '../Tooltip/Tooltip';\n\nimport './CircleMap.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\n\n\nexport class CircleMap extends Component {\n\tmap;\n\tstate = {};\n\t// prep the popup\n\tpopup = new mapboxgl.Popup({\n\t\tcloseButton: false,\n\t\tcloseOnClick: false\n\t});\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// bind popup to main component\n\t\tthis.showPopup = this.showPopup.bind(this);\n\t\tthis.hidePopup = this.hidePopup.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst data = this.props.data;\n\n\t\t// extents for circles\n\t\tthis.extent_calcuted = false;\n\t\t// set the min/max sizes for circles\n\t\tthis.range = this.props.range ? this.props.range : [3,50];\n\n\t\t// API key\n\t\tmapboxgl.accessToken = this.props.config.accessToken;\n\t\t\n\t\tthis.map = new mapboxgl.Map({\n\t\t\tcontainer: this.mapContainer,\n\t\t\tstyle: this.props.mapboxStyle,\n\t\t\tcenter: [this.props.center[1], this.props.center[0]],\n      \t\tzoom: this.props.zoom\n\t\t});\n\n\t\t// render the map\n\t\tif (data.features) {\n\t\t\tthis.renderMap(data);\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.state.mapIsLoaded) {\n\t\t\tif (this.props.data !== prevProps.data) {\n\t\t\t    this.map.getSource(this.props.mapDataSource).setData(this.props.data);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.renderMap(this.props.data);\n\t\t}\n\t\t\n\t}\n\n\tgetExtent(data) {\n\t\tlet fire_size = [];\n\n\t\tdata.forEach(d => {\n\t\t\tfire_size.push(parseFloat(d.properties[this.props.circleSizeMetric]));\n\t\t});\n\t\treturn [Math.min(...fire_size), Math.max(...fire_size)];\n\t}\n\n\thidePopup() {\n\t\tthis.map.getCanvas().style.cursor = '';\n\t\tthis.popup.remove();\n\t}\n\n\tmapRange(extent, range, value) {\n\t\treturn range[0] + (value - extent[0]) * (range[1] - range[0]) / (extent[1] - extent[0]);\n\t}\n\t\n\tprepData(data) {\n\t\t// we only want to calculate the extent once, otherwise the circle size changes when toggling by fire_type, which is confusing\n\t\tif (!this.extent_calcuted) {\n\t\t\tthis.extent = this.getExtent(data.features);\n\t\t\tthis.extent_calcuted = true;\n\t\t}\n\n\t\t// calculate circle size\n\t\tdata.features.forEach((d,i) => {\n\t\t\tconst radius = this.mapRange(this.extent, this.range, d.properties[this.props.circleSizeMetric]);\n\t\t\td.properties.radius = Math.log(radius) * 4;\n\t\t});\n\n\t\t// reorder array by CURRENT_SI, largest -> smallest\n\t\tdata.features.sort((a,b) => {\n\t\t\treturn b[this.props.circleSizeMetric] - a[this.props.circleSizeMetric];\n\t\t});\n\t}\n\n\tsetupPopupText(properties) {\n\t\treturn Tooltip(properties);\n\t}\n\n\tshowPopup(e) {\n\t\t// change cursor style as UI indicator\n\t\tthis.map.getCanvas().style.cursor = 'pointer';\n\t\t// popup content to be displayed\n\t\tconst text = this.setupPopupText(e.features[0].properties);\n\n\t\t// set coords based on mouse position\n\t\tthis.popup.setLngLat(e.lngLat)\n\t\t\t.setHTML(text)\n\t\t\t.addTo(this.map)\n\t}\n\n\trenderMap(data) {\n\t\tthis.prepData(data);\n\n\t\t// add fire location\n\t\tthis.map.on('load', () => {\n\t\t\tthis.map.addSource('data-layer', {\n\t\t\t\ttype: 'geojson',\n\t\t\t\tdata: data\n\t\t\t});\n\n\t\t\tthis.map.addLayer({\n\t\t\t\tid: 'data-layer',\n\t\t\t\ttype: 'circle',\n\t\t\t\tsource: 'data-layer',\n\t\t\t\tpaint: {\n\t\t\t\t\t'circle-color': this.props.circleColours,\n\t\t\t\t\t'circle-opacity': 0.2,\n\t\t\t\t\t'circle-radius': [\n\t\t\t\t\t\t'interpolate',\n\t\t\t\t\t\t['linear'],\n\t\t\t\t\t\t['get', this.props.circleMarkerClassField],\n\t\t\t\t\t\t100,\n\t\t\t\t\t\t5,\n\t\t\t\t\t\t5000,\n\t\t\t\t\t\t15\n\t\t\t\t\t],\n\t\t\t\t\t// probably a better way to do this...\n\t\t\t\t\t// 'circle-radius': [\n\t\t\t\t\t// \t'*',\n\t\t\t\t\t// \t['get', 'radius'],\n\t\t\t\t\t// \t1\n\t\t\t\t\t// ],\n\t\t\t\t\t'circle-stroke-width': 0.5,\n\t\t\t\t\t'circle-stroke-color': '#0062a3'\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// add search box & nav controls \n\t\t\tthis.map.addControl(\n\t\t\t\tnew MapboxGeocoder({\n\t\t\t\t\taccessToken: this.props.config.accessToken,\n\t\t\t\t\tmapboxgl: mapboxgl\n\t\t\t\t}))\n\t\t\tthis.map.addControl(new mapboxgl.NavigationControl());\n\n\t\t\t// show & hide the popup\n\t\t\tthis.map.on('mouseenter', 'data-layer', this.showPopup);\n\t\t\tthis.map.on('mouseleave', 'data-layer', this.hidePopup);\n\t\t});\n\n\t\tthis.setState({\n\t\t\tmapIsLoaded: true\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div ref={el => this.mapContainer = el} />\n\t\t);\n\t}\n}\n\n\nexport default CircleMap;","import Axios from 'axios';\nimport React, { Component } from 'react';\nimport CircleMap from '../CircleMap/CircleMap';\nimport './MapboxMap.css';\n\n\n\nexport class MapBoxMap extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tdata_all: [],\n\t\t\tdata_display: []\n\t\t}\n\t}\t\n\n\tcomponentDidMount() {\n\t\tAxios.get(this.props.data)\n\t\t\t.then(resp => {\n\t\t\t\t// update our state with the new data\n\t\t\t\tthis.setState({\n\t\t\t\t\tdata_all: resp.data,\n\t\t\t\t\tdata_display: resp.data,\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<CircleMap\n\t\t\t\tcenter={this.props.mapOptions.center}\n\t\t\t\tcircleColours={this.props.mapOptions.circleColours}\n\t\t\t\tcircleMarkerClassField={this.props.mapOptions.classField}\n\t\t\t\tcircleSizeMetric={this.props.mapOptions.circleSizeMetric}\n\t\t\t\tconfig={this.props.mapboxConfig}\n\t\t\t\tcontainer=\"mapview\"\n\t\t\t\tdata={this.state.data_display}\n\t\t\t\tdata_all={this.state.data_all}\n\t\t\t\tmapboxStyle={this.props.mapboxStyle}\n\t\t\t\tmapDataSource={this.props.mapDataSource}\n\t\t\t\tmaxZoom={this.props.mapOptions.maxZoom}\n\t\t\t\tminZoom={this.props.mapOptions.minZoom}\n\t\t\t\tzoom={this.props.mapOptions.zoom}>\n\t\t\t</CircleMap>\n\t\t);\n\t}\n}\n\nexport default MapBoxMap;\n","const mapbox_config = {\n\t\"accessToken\": \"pk.eyJ1IjoibmdyaWZmaXRocy1wb3N0bWVkaWEiLCJhIjoiY2tra3BmcHI0MTcycjJucWtnNG9pZnlwcSJ9.HhYC3oRsfG2_BZH7jAsViQ\"\n};\n\nexport default mapbox_config;","import React, { Fragment } from 'react';\nimport MapboxMap from '../MapboxMap/MapboxMap';\nimport './App.css';\nimport mapboxConfig from '../../data/mapbox-config';\n\n\n// Wildfires url\n// const mapDataUrl = 'https://vs-postmedia-data.sfo2.digitaloceanspaces.com/wildfires.json';\nconst mapDataUrl = 'https://vs-postmedia-data.sfo2.digitaloceanspaces.com/covid/covid-hr-cases.json';\n\n\n// map tiles & attribution\n// const mapboxStyle = 'mapbox://styles/mapbox/outdoors-v11';\nconst mapboxStyle = 'mapbox://styles/ngriffiths-postmedia/ckl2widct1euv17mkqgsryqff';\n\n// map options\nconst circleMarkerClassField = 'cumulative_cases';\nconst mapDataSource = 'data-layer';\nconst windowWidth = window.innerWidth;\n\nconst mapOptions = {\n\tcenter: windowWidth > 400 ? [54.7, -93.98] : [58.2, -94.1],\n\t// see mapbox\n\tcircleColours: '#0062A3',\n\tcircleSizeMetric: 'cases_100k', \n\tclassField: circleMarkerClassField,\n\tmaxZoom: 8,\n\tminZoom: 3,\n\tzoom: windowWidth > 400 ? 2.75 : 1.75\n}\n\n\nfunction App() {\n\treturn (\n\t\t<Fragment>\n\t\t\t<h2>COVID-19 cases per 100,000 people, by health region</h2>\n\t\t\t<MapboxMap\n\t\t\t\tdata={mapDataUrl}\n\t\t\t\tmapDataSource={mapDataSource}\n\t\t\t\tmapboxConfig={mapboxConfig}\n\t\t\t\tmapboxStyle={mapboxStyle}\n\t\t\t\tmapOptions={mapOptions}>\n\t\t\t</MapboxMap>\n\t\t\t<p className=\"source\">Source: <a href=\"https://opencovid.ca\" target=\"_blank\">COVID-19 Canada Open Data Working Group</a></p>\n\t\t</Fragment>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n// CSS\nimport normalize from './css/normalize.css';\nimport postmedia from './css/postmedia.css';\nimport colours from './css/colors.css';\nimport fonts from './css/fonts.css';\nimport './css/index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}